// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sample/service.proto

package sample

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TestEndpointRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TestEndpointRequest) Reset()         { *m = TestEndpointRequest{} }
func (m *TestEndpointRequest) String() string { return proto.CompactTextString(m) }
func (*TestEndpointRequest) ProtoMessage()    {}
func (*TestEndpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c67bb34ead656f08, []int{0}
}

func (m *TestEndpointRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestEndpointRequest.Unmarshal(m, b)
}
func (m *TestEndpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestEndpointRequest.Marshal(b, m, deterministic)
}
func (m *TestEndpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestEndpointRequest.Merge(m, src)
}
func (m *TestEndpointRequest) XXX_Size() int {
	return xxx_messageInfo_TestEndpointRequest.Size(m)
}
func (m *TestEndpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestEndpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestEndpointRequest proto.InternalMessageInfo

func (m *TestEndpointRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TestEndpointResponse struct {
	Message              *TestMessage `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TestEndpointResponse) Reset()         { *m = TestEndpointResponse{} }
func (m *TestEndpointResponse) String() string { return proto.CompactTextString(m) }
func (*TestEndpointResponse) ProtoMessage()    {}
func (*TestEndpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c67bb34ead656f08, []int{1}
}

func (m *TestEndpointResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TestEndpointResponse.Unmarshal(m, b)
}
func (m *TestEndpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TestEndpointResponse.Marshal(b, m, deterministic)
}
func (m *TestEndpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestEndpointResponse.Merge(m, src)
}
func (m *TestEndpointResponse) XXX_Size() int {
	return xxx_messageInfo_TestEndpointResponse.Size(m)
}
func (m *TestEndpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestEndpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestEndpointResponse proto.InternalMessageInfo

func (m *TestEndpointResponse) GetMessage() *TestMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*TestEndpointRequest)(nil), "sample.TestEndpointRequest")
	proto.RegisterType((*TestEndpointResponse)(nil), "sample.TestEndpointResponse")
}

func init() { proto.RegisterFile("sample/service.proto", fileDescriptor_c67bb34ead656f08) }

var fileDescriptor_c67bb34ead656f08 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4e, 0xcc, 0x2d,
	0xc8, 0x49, 0xd5, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x62, 0x83, 0x88, 0x4a, 0xc1, 0x64, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0xa1, 0xb2, 0x52,
	0x32, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x89, 0x05, 0x99, 0xfa, 0x89, 0x79, 0x79, 0xf9,
	0x25, 0x89, 0x25, 0x99, 0xf9, 0x79, 0xc5, 0x10, 0x59, 0x25, 0x55, 0x2e, 0xe1, 0x90, 0xd4, 0xe2,
	0x12, 0xd7, 0xbc, 0x94, 0x82, 0xfc, 0xcc, 0xbc, 0x92, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12,
	0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0xa6, 0xcc, 0x14,
	0x25, 0x57, 0x2e, 0x11, 0x54, 0x65, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0xba, 0x5c, 0xec,
	0x50, 0xdb, 0xc0, 0x8a, 0xb9, 0x8d, 0x84, 0xf5, 0x20, 0x8e, 0xd0, 0x03, 0x29, 0xf7, 0x85, 0x48,
	0x05, 0xc1, 0xd4, 0x18, 0xbd, 0x62, 0xe4, 0xe2, 0x06, 0x49, 0x04, 0x43, 0xdc, 0x2f, 0x94, 0xc3,
	0xc5, 0x8f, 0x6c, 0xac, 0x7b, 0x6a, 0x89, 0x90, 0x34, 0xb2, 0x01, 0x68, 0xce, 0x92, 0x92, 0xc1,
	0x2e, 0x09, 0x71, 0x8c, 0x92, 0x5c, 0xd3, 0xe5, 0x27, 0x93, 0x99, 0x24, 0x84, 0xc4, 0xf4, 0x4b,
	0x52, 0x8b, 0x4b, 0x92, 0x52, 0xd3, 0xf2, 0x8b, 0x52, 0xf5, 0xab, 0x33, 0x53, 0x6a, 0xf5, 0x13,
	0xd3, 0x4a, 0x52, 0x8b, 0x84, 0x72, 0xb9, 0x04, 0x90, 0xf5, 0x05, 0xe4, 0x17, 0x53, 0xc3, 0x3a,
	0x25, 0x1c, 0xd6, 0x25, 0xb1, 0x81, 0x43, 0xd8, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x5b,
	0xf7, 0x98, 0xb5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServiceClient interface {
	// TestEndpointGet comment for testing
	TestEndpointGet(ctx context.Context, in *TestEndpointRequest, opts ...grpc.CallOption) (*TestEndpointResponse, error)
	TestEndpointPost(ctx context.Context, in *TestEndpointRequest, opts ...grpc.CallOption) (*TestEndpointResponse, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) TestEndpointGet(ctx context.Context, in *TestEndpointRequest, opts ...grpc.CallOption) (*TestEndpointResponse, error) {
	out := new(TestEndpointResponse)
	err := c.cc.Invoke(ctx, "/sample.TestService/TestEndpointGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) TestEndpointPost(ctx context.Context, in *TestEndpointRequest, opts ...grpc.CallOption) (*TestEndpointResponse, error) {
	out := new(TestEndpointResponse)
	err := c.cc.Invoke(ctx, "/sample.TestService/TestEndpointPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
type TestServiceServer interface {
	// TestEndpointGet comment for testing
	TestEndpointGet(context.Context, *TestEndpointRequest) (*TestEndpointResponse, error)
	TestEndpointPost(context.Context, *TestEndpointRequest) (*TestEndpointResponse, error)
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_TestEndpointGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestEndpointGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.TestService/TestEndpointGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestEndpointGet(ctx, req.(*TestEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_TestEndpointPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestEndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestEndpointPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sample.TestService/TestEndpointPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestEndpointPost(ctx, req.(*TestEndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sample.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestEndpointGet",
			Handler:    _TestService_TestEndpointGet_Handler,
		},
		{
			MethodName: "TestEndpointPost",
			Handler:    _TestService_TestEndpointPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sample/service.proto",
}
